/*
* Copyright (C) 2010 ECOSUR, Andrew Waterman and Max Pimm
*
* Licensed under the Academic Free License v. 3.0.
* http://www.opensource.org/licenses/afl-3.0.php
*/

/*
 * This rule package creates a strategic, "Simple" player.
 * 
 * @author awaterma@ecosur.mx
*/

package mx.ecosur.multigame.gente;

import mx.ecosur.multigame.enums.GameState;
import mx.ecosur.multigame.grid.entity.*;
import mx.ecosur.multigame.gente.entity.*;
import mx.ecosur.multigame.grid.Color;

import java.awt.Dimension;
import java.util.Iterator;
import java.util.Set;
import java.util.List;

global List unbound;
global Dimension dim;

#Yellow must move first, and that move can only be at the center of the board
rule "first-move"
    lock-on-active true
when
    $grid : GameGrid (empty == true)
    $player : GridPlayer ()
    $moves : List()
then
    GenteMove centerMove = new GenteMove ($player, new GridCell (
        (int) dim.getHeight() / 2, (int) dim.getWidth() / 2, $player.getColor()));
    modify ($moves) { add (centerMove) };
    retract ($player);
end

rule "random-move"
    lock-on-active true
when
    $grid : GameGrid (empty == false)
    $player : GridPlayer ()
    $cell : GridCell ()
    $moves : List()
then
    modify ($cell) { setColor ($player.getColor()) };
    GenteMove move = new GenteMove ($player, $cell);
    modify ($moves) { add (move) };
    retract ($cell);
end

rule "random-move-against-enemy"
    lock-on-active true
when
    not GridCell ()
    $player : GridPlayer()
    $moves : List()
then
    if (unbound.iterator().hasNext()) {
        GridCell cell = (GridCell) unbound.iterator().next();
        cell.setColor($player.getColor());
        GenteMove move = new GenteMove ($player, cell);
        modify ($moves) { add (move) };
        retract ($player);
    }
end
