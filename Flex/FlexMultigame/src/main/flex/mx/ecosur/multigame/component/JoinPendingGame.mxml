<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" width="100%"
          title="{resourceManager.getString('Lobby', 'pending.panel.title')}" creationComplete="init(event)">

    <mx:Metadata>
        [Event(name="gameJoined", type="mx.ecosur.multigame.event.PlayEvent")]
        [ResourceBundle("Lobby")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
        import mx.ecosur.multigame.dao.GameDAO;
        import mx.ecosur.multigame.entity.Agent;
        import mx.ecosur.multigame.enum.GameState;
        import mx.ecosur.multigame.event.PlayEvent;
        import mx.ecosur.multigame.entity.Registrant;
        import mx.ecosur.multigame.entity.GamePlayer;
        import mx.ecosur.multigame.entity.Game;
        import mx.ecosur.multigame.enum.Color;
        import mx.ecosur.multigame.event.ServiceGameEvent;

        import mx.formatters.DateFormatter;
        import mx.collections.ArrayCollection;
        import mx.managers.CursorManager;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.controls.Alert;

        public var agent:Agent;
        public var player:Registrant;
        private var _games:ArrayCollection;

        public function init(event:Event):void {
            _games = new ArrayCollection();
            var token:AsyncToken = gameService.getPendingGames(player);
            token.resultHandler = updateResultHandler;
            token.faultHandler = updateFaultHandler;
        }

        public function addGame(game:Game):Boolean {
            var dao:GameDAO = new GameDAO();
            dao.initialize(game);
            return addDAO(dao);
        }

        public function removeGame(game:Game):Boolean {
            var dao:GameDAO = new GameDAO();
            dao.initialize(game);
            return removeDAO(dao);
        }

        public function updateGame(game:Game):Boolean {
            var dao:GameDAO = new GameDAO();
            dao.initialize(game);
            return updateDAO(dao);
        }

        function addDAO(dao:GameDAO):Boolean {
            var ret:Boolean = false;
            if (!containsPlayer(dao) && dao.players.length < 4) {
                var idx:int = -1;
                for (var i:int = 0; i < _games.length; i++) {
                    var d:GameDAO = GameDAO(_games.getItemAt(i));
                    if (d.gameId == dao.gameId) {
                        idx = i;
                    }
                }
    
                if (idx == -1) {
                    _games.addItem(dao);
                    updateDataGrid();
                } else
                    ret = false;
            }
            return ret;
        }

        function removeDAO(dao:GameDAO):Boolean {
            var ret:Boolean = (_games != null);
            if (ret) {
                var idx:int = -1;
                for (var i:int = 0; i < _games.length; i++) {
                    var d:GameDAO = GameDAO(_games.getItemAt(i));
                    if (d.gameId == dao.gameId) {
                        idx = i;
                    }
                }

                if (idx >= 0) {
                    _games.removeItemAt(idx);
                    updateDataGrid();
                } else
                    ret = false;

            }

            return ret;
        }

        function updateDAO(dao:GameDAO):Boolean {
            var ret:Boolean = (_games != null);
            if (!containsPlayer(dao) && dao.players.length < 4) {
                if (ret) {
                    var idx:int = -1;
                    for (var i:int = 0; i < _games.length; i++) {
                        var g:GameDAO = GameDAO(_games.getItemAt(i));
                        if (g.gameId == dao.gameId) {
                            idx = i;
                        }
                    }

                    if (idx >= 0) {
                        _games.removeItemAt(idx);
                        _games.addItemAt(dao, idx);
                        updateDataGrid();
                    } else
                        ret = false;
                }
            }
            return ret;
        }

        public function reload(event:Event):void {
            var token:AsyncToken = gameService.getPendingGames(player);
            token.resultHandler = updateResultHandler;
            token.faultHandler = updateFaultHandler;
        }

        private function updateResultHandler(event:ResultEvent):void {
            _games = ArrayCollection(event.result);
            updateDataGrid();
        }

        private function containsPlayer(dao:GameDAO):Boolean {
            var ret:Boolean = false;
            for (var i:int = 0; i < dao.players.length; i++) {
                if (dao.players[i] == player.name) {
                    ret = true;
                    break;
                }
            }

            return ret;
        }

        private function updateFaultHandler(event:FaultEvent):void {
            CursorManager.removeBusyCursor();
            Alert.show(event.fault.faultString, "Error getting pending games!");
        }

        private function joinResultHandler(event:ResultEvent):void {
            var serviceEvent:ServiceGameEvent = ServiceGameEvent(event.result);
            removeJoinedGame(serviceEvent.gameId);
            dispatchEvent(new PlayEvent("gameJoined", serviceEvent.gameId,  serviceEvent.gameType, player));
        }

        private function joinFaultHandler(event:FaultEvent):void {
            CursorManager.removeBusyCursor();
            Alert.show(event.fault.faultString, "Error joining pending game!");
        }

        private function updateDataGrid():void {
            if (gamesDataGrid == null)
                return
            var game:GameDAO, selected:GameDAO;
            var dataProvider:ArrayCollection = new ArrayCollection();
            var dataItem:Object, selectedItem:Object;
            var df:DateFormatter = new DateFormatter();
            df.formatString = "DD/MM/YYYY H:NN";

            /* Get the currently selected game */
            if (gamesDataGrid.selectedIndex > -1) {
                if (_games.length > gamesDataGrid.selectedIndex)
                    selected = GameDAO(_games.getItemAt(gamesDataGrid.selectedIndex));
            }

            for (var i:Number = 0; i < _games.length; i++) {
                game = GameDAO(_games.getItemAt(i));
                dataItem = new Object();
                dataItem.gameType = game.gameType;
                dataItem.created = df.format(game.creationDate);
                dataItem.players = extractPlayers(game);
                dataItem.status = GameState.getDescription(game.status);
                dataProvider.addItem(dataItem);
                if (selected != null && selected.gameId == game.gameId && game.status == GameState.WAITING)
                    selectedItem = dataItem;
            }
            gamesDataGrid.dataProvider = dataProvider;
            if (selectedItem != null) {
                gamesDataGrid.selectedItem = selectedItem;
            }
        }
        
        private function extractPlayers(game:GameDAO):String {
            var ret:String = "";
            for (var i:Number = 0; game.players != null && i < game.players.length; i++) {
                ret += game.players[i] + ", ";
            }

            ret = ret.substring(0, ret.length - 2);
            return ret;
        }

        private function joinPending():void {
            CursorManager.setBusyCursor();
            var idx:int = gamesDataGrid.selectedIndex;
            /* Catch the case where no item is selected, and select the first */
            if (idx < 0) idx = 0;
            var dao:GameDAO = GameDAO(_games.getItemAt(idx));
            var pendingToken:AsyncToken = gameService.joinPendingGame(dao.gameId, player, Color.UNKNOWN);
            pendingToken.resultHandler = joinResultHandler;
            pendingToken.faultHandler = joinFaultHandler;
        }
        
        private function removeJoinedGame(gameId:int):void {
            for (var i:Number = 0; i < _games.length; i++) {
                var d:GameDAO = GameDAO(_games [ i ] );
                if (d.gameId == gameId) {
                    _games.removeItemAt(i);
                    break;
                }
            } 
        }

        ]]>
    </mx:Script>
    
    <mx:RemoteObject id="gameService" destination="gameService" 
    	result="event.token.resultHandler(event)" fault="event.token.faultHandler(event)"/>

    <mx:VBox width="100%">
        <mx:DataGrid id="gamesDataGrid" width="100%" rowCount="3" minWidth="700">
            <mx:columns>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'pending.data.column1')}"
                                   dataField="created" width="120"/>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'pending.data.column2')}"
                                   dataField="gameType" width="80"/>
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'pending.data.column3')}"
                                   dataField="players" wordWrap="true" />
                <mx:DataGridColumn headerText="{resourceManager.getString('Lobby', 'pending.data.column4')}"
                                   dataField="status" width="120" wordWrap="true"/>
            </mx:columns>
        </mx:DataGrid>
        <mx:Form width="100%">
            <mx:FormItem horizontalAlign="right" width="100%">
                <mx:Button click="joinPending()" label="{resourceManager.getString('Lobby', 'pending.button')}"/>
            </mx:FormItem>
        </mx:Form>
    </mx:VBox>
    
</mx:Panel>
